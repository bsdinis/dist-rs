syntax = "proto3";

package raft;

message Step {
    int64 before = 1;
    int64 step = 2;
}

message Operation {
    oneof op {
        int64 incr = 1;
        int64 decr = 2;
        bool get = 3;
        Step atomic_incr = 4;
        Step atomic_decr = 5;
    }
}

message OperationResult {
    int64 cur = 1;
    bool success = 2;
}

message LogEntry {
    uint64 term = 1;
    uint64 idx = 2;
    Operation op = 3;
}

message OptionalLeader {
    uint64 id = 1;
}

message VoteReq {
    uint64 term = 1;
    uint64 candidate_id = 2;
    uint64 last_log_term = 3;
    uint64 last_log_idx = 4;
}

message VoteResp {
    bool success = 1;
    uint64 term = 2;
    OptionalLeader leader = 3;
}


message AppendEntriesReq {
    uint64 term = 1;
    uint64 leader = 2;
    uint64 prev_log_term = 3;
    uint64 prev_log_idx = 4;
    uint64 leader_commit_idx = 5;
    repeated LogEntry entries = 6;
}

message AppendEntriesResp {
    bool success = 1;
    uint64 next_entry = 2;
    uint64 term = 3;
    OptionalLeader leader = 4;
}

message ForwardReq {
    Operation op = 1;
    uint64 term = 2;
    uint64 leader = 3;
}

message ForwardResp {
    OperationResult result = 1;
    uint64 term = 2;
    uint64 leader = 3;
}


service Raft {
	rpc request_vote(VoteReq) returns (VoteResp);
	rpc append_entries(AppendEntriesReq) returns (AppendEntriesResp);
    rpc forward_request(ForwardReq) returns (ForwardResp);
}
