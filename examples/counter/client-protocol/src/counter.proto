syntax = "proto3";

package counter;

message IncrCounterReq {
    int64 step = 1;
}
message IncrCounterResp {
    int64 cur = 1;
}

message DecrCounterReq {
    int64 step = 1;
}
message DecrCounterResp {
    int64 cur = 1;
}

message AtomicIncrCounterReq {
    int64 before = 1;
    int64 step = 2;
}
message AtomicIncrCounterResp {
    int64 cur = 1;
    bool success = 2;
}

message AtomicDecrCounterReq {
    int64 before = 1;
    int64 step = 2;
}
message AtomicDecrCounterResp {
    int64 cur = 1;
    bool success = 2;
}

message GetCounterReq {}
message GetCounterResp {
    int64 cur = 1;
}

message StatusReq {}

message Optional {
    uint64 val = 1;
}
message StatusResp {
    uint64 id = 1;
    uint64 available = 2;
    uint64 quorum_sz = 3;
    uint64 term = 4;
    Optional leader = 5;
    Optional voted_for = 6;
    uint64 last_term = 7;
    uint64 last_idx = 8;
    uint64 committed_idx = 9;
    uint64 entries = 10;
    uint64 unstable = 11;
}

service Counter {
	rpc incr(IncrCounterReq) returns (IncrCounterResp);
	rpc decr(DecrCounterReq) returns (DecrCounterResp);
	rpc atomic_incr(AtomicIncrCounterReq) returns (AtomicIncrCounterResp);
	rpc atomic_decr(AtomicDecrCounterReq) returns (AtomicDecrCounterResp);
	rpc get(GetCounterReq) returns (GetCounterResp);

    rpc status(StatusReq) returns (StatusResp);
}
